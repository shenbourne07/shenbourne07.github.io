import { useLocaleConfig } from '@vuepress/helper/client';
import { useClipboard, useEventListener } from '@vueuse/core';
import { nextTick, onMounted, watch } from 'vue';
import { usePageData } from 'vuepress/client';
import { isMobile } from '../utils/index.js';
const timeoutIdMap = new Map();
export const useCopyCode = ({ delay = 500, duration = 2000, locales, selector, showInMobile, }) => {
    const { copy } = useClipboard({ legacy: true });
    const locale = useLocaleConfig(locales);
    const page = usePageData();
    const insertCopyButton = (codeBlockElement) => {
        if (!codeBlockElement.hasAttribute('copy-code-registered')) {
            const copyElement = document.createElement('button');
            copyElement.type = 'button';
            copyElement.classList.add('vp-copy-code-button');
            copyElement.innerHTML = '<div class="vp-copy-icon" />';
            copyElement.setAttribute('aria-label', locale.value.copy);
            copyElement.setAttribute('data-copied', locale.value.copied);
            if (codeBlockElement.parentElement)
                codeBlockElement.parentElement.insertBefore(copyElement, codeBlockElement);
            codeBlockElement.setAttribute('copy-code-registered', '');
        }
    };
    const appendCopyButton = () => {
        nextTick().then(() => setTimeout(() => {
            selector.forEach((item) => {
                document.querySelectorAll(item).forEach(insertCopyButton);
            });
        }, delay));
    };
    const copyContent = (codeContainer, codeContent, button) => {
        let { innerText: text = '' } = codeContent;
        if (
        // is shell
        /language-(shellscript|shell|bash|sh|zsh)/.test(codeContainer.classList.toString()))
            text = text.replace(/^ *(\$|>) /gm, '');
        copy(text).then(() => {
            button.classList.add('copied');
            clearTimeout(timeoutIdMap.get(button));
            const timeoutId = setTimeout(() => {
                button.classList.remove('copied');
                button.blur();
                timeoutIdMap.delete(button);
            }, duration);
            timeoutIdMap.set(button, timeoutId);
        });
    };
    onMounted(() => {
        const enabled = !isMobile() || showInMobile;
        if (enabled)
            appendCopyButton();
        useEventListener('click', (event) => {
            const el = event.target;
            if (el.matches('div[class*="language-"] > button.copy')) {
                const codeContainer = el.parentElement;
                const preBlock = el.nextElementSibling;
                if (preBlock)
                    copyContent(codeContainer, preBlock, el);
            }
            else if (el.matches('div[class*="language-"] div.vp-copy-icon')) {
                const buttonElement = el.parentElement;
                const codeContainer = buttonElement.parentElement;
                const preBlock = buttonElement.nextElementSibling;
                if (preBlock)
                    copyContent(codeContainer, preBlock, buttonElement);
            }
        });
        watch(() => page.value.path, () => {
            if (enabled)
                appendCopyButton();
        });
    });
};
